# -*- coding: Windows-1251 -*-

# Функции принадлежности
def triangular(x, a, b, c):
    if a <= x <= b:
        return (x - a) / (b - a)
    elif b <= x <= c:
        return (c - x) / (c - b)
    else:
        return 0

def trapezoidal(x, a, b, c, d):
    if a <= x <= b:
        return (x - a) / (b - a)
    elif b <= x <= c:
        return 1
    elif c <= x <= d:
        return (d - x) / (d - c)
    else:
        return 0

# Функции фаззификации
def fuzzify_Pвозд(value):
    return {
        "низкий": trapezoidal(value, 0, 10, 20, 40),
        "средний": triangular(value, 30, 50, 70),
        "повышенный": triangular(value, 60, 80, 100),
        "высокий": trapezoidal(value, 80, 90, 100, 100),
    }
def fuzzify_Pснег(value):
    return {
        "низкий": trapezoidal(value, 0, 10, 20, 40),
        "средний": triangular(value, 30, 50, 70),
        "повышенный": triangular(value, 60, 80, 100),
        "высокий": trapezoidal(value, 80, 90, 100, 100),
    }
def fuzzify_Pпочв(value):
    return {
        "низкий": trapezoidal(value, 0, 10, 20, 40),
        "средний": triangular(value, 30, 50, 70),
        "повышенный": triangular(value, 60, 80, 100),
        "высокий": trapezoidal(value, 80, 90, 100, 100),
    }
def fuzzify_Pбиоср(value):
    return {
        "низкий": trapezoidal(value, 0, 10, 20, 40),
        "средний": triangular(value, 30, 50, 70),
        "повышенный": triangular(value, 60, 80, 100),
        "высокий": trapezoidal(value, 80, 90, 100, 100),
    }

# Правила с учетом состояния экогеосистемы
rules = [
    (["низкий", "низкий", "низкий", "низкий"], "низкий", "отличное"),
    (["низкий", "низкий", "низкий", "средний"], "низкий", "отличное"),
    (["низкий", "низкий", "средний", "низкий"], "низкий", "отличное"),
    (["низкий", "средний", "низкий", "низкий"], "низкий", "отличное"),
    (["средний", "низкий", "низкий", "низкий"], "средний", "хорошее"),
    (["низкий", "низкий", "средний", "средний"], "низкий", "отличное"),
    (["низкий", "средний", "низкий", "средний"], "средний", "хорошее"),
    (["средний", "низкий", "низкий", "средний"], "средний", "хорошее"),
    (["низкий", "средний", "средний", "низкий"], "средний", "хорошее"),
    (["средний", "низкий", "средний", "низкий"], "средний", "хорошее"),
    (["средний", "средний", "низкий", "низкий"], "средний", "хорошее"),
    (["низкий", "средний", "средний", "средний"], "средний", "хорошее"),
    (["средний", "средний", "средний", "низкий"], "средний", "хорошее"),
    (["средний", "средний", "низкий", "средний"], "средний", "хорошее"),
    (["средний", "низкий", "средний", "средний"], "средний", "хорошее"),
    (["средний", "средний", "средний", "средний"], "средний", "хорошее"),
    (["средний", "средний", "средний", "повышенный"], "средний", "хорошее"),
    (["средний", "средний", "повышенный", "средний"], "средний", "хорошее"),
    (["средний", "повышенный", "средний", "средний"], "средний", "хорошее"),
    (["повышенный", "средний", "средний", "средний"], "повышенный", "напряженное"),
    (["средний", "средний", "повышенный", "повышенный"], "средний", "хорошее"),
    (["средний", "повышенный", "средний", "повышенный"], "повышенный", "напряженное"),
    (["повышенный", "средний", "средний", "повышенный"], "повышенный", "напряженное"),
    (["средний", "повышенный", "повышенный", "средний"], "повышенный", "напряженное"),
    (["повышенный", "средний", "повышенный", "средний"], "повышенный", "напряженное"),
    (["повышенный", "повышенный", "средний", "средний"], "повышенный", "напряженное"),
    (["повышенный", "повышенный", "повышенный", "средний"], "повышенный", "напряженное"),
    (["повышенный", "средний", "повышенный", "повышенный"], "повышенный", "напряженное"),
    (["повышенный", "повышенный", "средний", "повышенный"], "повышенный", "напряженное"),
    (["средний", "повышенный", "повышенный", "повышенный"], "повышенный", "напряженное"),
    (["повышенный", "повышенный", "повышенный", "повышенный"], "повышенный", "напряженное"),
    (["повышенный", "повышенный", "повышенный", "высокий"], "повышенный", "напряженное"),
    (["повышенный", "повышенный", "высокий", "повышенный"], "повышенный", "напряженное"),
    (["повышенный", "высокий", "повышенный", "повышенный"], "повышенный", "напряженное"),
    (["высокий", "повышенный", "повышенный", "повышенный"], "высокий", "плохое"),
    (["повышенный", "повышенный", "высокий", "высокий"], "повышенный", "напряженное"),
    (["повышенный", "высокий", "повышенный", "высокий"], "высокий", "плохое"),
    (["высокий", "повышенный", "повышенный", "высокий"], "высокий", "плохое"),
    (["повышенный", "высокий", "высокий", "повышенный"], "высокий", "плохое"),
    (["высокий", "повышенный", "высокий", "повышенный"], "высокий", "плохое"),
    (["высокий", "высокий", "повышенный", "высокий"], "высокий", "плохое"),
    (["высокий", "высокий", "высокий", "высокий"], "высокий", "плохое"),
    (["низкий", "низкий", "низкий", "повышенный"], "низкий", "отличное"),
    (["низкий", "низкий", "повышенный", "низкий"], "низкий", "отличное"),
    (["низкий", "повышенный", "низкий", "низкий"], "средний", "хорошее"),
    (["низкий", "высокий", "низкий", "низкий"], "средний", "хорошее"),
    (["повышенный", "низкий", "низкий", "низкий"], "повышенный", "напряженное"),
    (["средний", "средний", "средний", "высокий"], "средний", "хорошее"),
    (["средний", "средний", "высокий", "средний"], "средний", "хорошее"),
    (["средний", "высокий", "средний", "средний"], "повышенный", "напряженное"),
    (["высокий", "средний", "средний", "средний"], "высокий", "плохое"),
    (["низкий", "низкий", "повышенный", "повышенный"], "средний", "хорошее"),
    (["низкий", "повышенный", "повышенный", "низкий"], "средний", "хорошее"),
    (["повышенный", "повышенный", "низкий", "низкий"], "повышенный", "напряженное"),
    (["высокий", "повышенный", "низкий", "низкий"], "высокий", "плохое"),
    (["повышенный", "повышенный", "повышенный", "низкий"], "повышенный", "напряженное"),
    (["высокий", "высокий", "высокий", "низкий"], "высокий", "плохое"),
    (["повышенный", "повышенный", "низкий", "повышенный"], "повышенный", "напряженное"),
    (["высокий", "высокий", "низкий", "высокий"], "высокий", "плохое"),
    (["повышенный", "низкий", "низкий", "повышенный"], "повышенный", "напряженное"),
    (["высокий", "низкий", "низкий", "высокий"], "высокий", "плохое"),
    (["повышенный", "низкий", "повышенный", "низкий"], "повышенный", "напряженное"),
    (["высокий", "низкий", "высокий", "низкий"], "высокий", "плохое"),
]

# Агрегация правил
def aggregate_rules(Pвозд, Pснег, Pпочв, Pбиоср):
    aggregated = {"низкий": 0, "средний": 0, "повышенный": 0, "высокий": 0}
    state_counts = {"отличное": 0, "хорошее": 0, "напряженное": 0, "плохое": 0}
    for antecedents, consequent, ecostate in rules:
        rule_value = min(Pвозд[antecedents[0]], Pснег[antecedents[1]], Pпочв[antecedents[2]], Pбиоср[antecedents[3]])
        aggregated[consequent] = max(aggregated[consequent], rule_value)
        state_counts[ecostate] = max(state_counts[ecostate], rule_value)
    # Выбираем состояние с максимальной степенью принадлежности
    state = max(state_counts, key=state_counts.get)
    return aggregated, state

# Дефаззификация: метод центра тяжести
def defuzzify(aggregated):
    numerator = 0
    denominator = 0
    x_range = list(range(101))
    # Оригинальная функция дефаззицикации (центроидная) представлена в виде дискретного выражения (допустим, x до 100)
    for x in x_range:
        membership = max(
            trapezoidal(x, 0, 10, 20, 40) * aggregated["низкий"],
            triangular(x, 30, 50, 70) * aggregated["средний"],
            triangular(x, 60, 80, 100) * aggregated["повышенный"],
            trapezoidal(x, 80, 90, 100, 100) * aggregated["высокий"],
        )
        numerator += x * membership
        denominator += membership
    return numerator / denominator if denominator != 0 else 0

# Функция запроса ввода неотрицательных чисел у пользователя
def get_non_negative_integer(prompt):
    while True:
        user_input = input(prompt)
        if user_input.lower() == 'exit':
            return None
        try:
            value = float(user_input)
            if value >= 0:
                return value
            else:
                print("Ошибка: введите неотрицательное число.")
        except ValueError:
            print("Ошибка: введите корректное число.")

# Функция записи данных в файл
def log_to_file(file_name, data):
    with open(file_name, 'a') as file:
        file.write(data + "\n")

# Основная функция
def main():
    file_path = "input_output_log.txt"
    while True:
        # Запрос у пользователя значения для каждого параметра
        Pвозд_value = get_non_negative_integer("Введите значение для Pвозд (неотрицательное целое число или 'exit' для выхода): ")
        if Pвозд_value is None:
            print("Выход из программы.")
            break
        
        Pснег_value = get_non_negative_integer("Введите значение для Pснег (неотрицательное целое число или 'exit' для выхода): ")
        if Pснег_value is None:
            print("Выход из программы.")
            break
        
        Pпочв_value = get_non_negative_integer("Введите значение для Pпочв (неотрицательное целое число или 'exit' для выхода): ")
        if Pпочв_value is None:
            print("Выход из программы.")
            break
        
        Pбиоср_value = get_non_negative_integer("Введите значение для Pбиоср (неотрицательное целое число или 'exit' для выхода): ")
        if Pбиоср_value is None:
            print("Выход из программы.")
            break
        
        # Запись в файл
        log_to_file(file_path, f"Pвозд: {Pвозд_value}")
        log_to_file(file_path, f"Pснег: {Pснег_value}")
        log_to_file(file_path, f"Pпочв: {Pпочв_value}")
        log_to_file(file_path, f"Pбиоср: {Pбиоср_value}")

        # Фаззификация
        Pвозд = fuzzify_Pвозд(Pвозд_value)
        Pснег = fuzzify_Pснег(Pснег_value)
        Pпочв = fuzzify_Pпочв(Pпочв_value)
        Pбиоср = fuzzify_Pбиоср(Pбиоср_value)
        
        # Вывод
        print(f"Результат фаззификации:\n{Pвозд},\n{Pснег},\n{Pпочв},\n{Pбиоср}")
        log_to_file(file_path, f"Результат фаззификации:\n{Pвозд},\n{Pснег},\n{Pпочв},\n{Pбиоср}")

        # Агрегация
        aggregated, ecostate = aggregate_rules(Pвозд, Pснег, Pпочв, Pбиоср)

        # Вывод
        print(f"Результат агрегации:\n{aggregated}")
        log_to_file(file_path, f"Результат агрегации:\n{aggregated}")

        # Дефаззификация
        Pобщ = defuzzify(aggregated)
        print(f"Результат Pобщ: {Pобщ:.5f}, состояние экогеосистемы: {ecostate}\n")
        log_to_file(file_path, f"Результат Pобщ: {Pобщ:.5f}, состояние экогеосистемы: {ecostate}\n")
        
        # Запрос на продолжение или выход
        continue_input = input("Хотите ввести другие значения? (y [any symbols] / exit): ").lower()
        if continue_input == "exit":
            print("Выход из программы.")
            break


if __name__ == "__main__":
    main()
